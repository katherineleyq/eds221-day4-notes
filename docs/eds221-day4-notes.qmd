---
title: "eds221-day4-notes"
format: html
editor: visual
execute:
    warning: FALSE
---

```{r}
library(tidyverse)
```

## Nested for loops

```{r}
file_prefix <- c("temp", "ph", "salinity")
file_suffix <- c(1, 2, 3, 4, 5)

for (i in seq_along(file_prefix)) {
  for (j in seq_along(file_suffix)) {
    print(paste0(file_prefix[i], "_", file_suffix[j]))
  }
}
```

## Functions

```{r}
# conceptually 

function_name <- function(bird, dog) {
  pets = bird + dog
  return(pets)
}

```

```{r}
# function in R

exclaim_age <- function(age) {
  print(paste("I am", age, "years old!"))
}

exclaim_age(age = 10)
```

```{r}
# side example
demoFunction <- function(apples, oranges) {
  print(paste("I love", apples, "and", oranges))
}

demoFunction(4, 9)

demoFunction(apples = 4, oranges = 9)

demoFunction(oranges = 10, apples = 3)
```

```{r}
animal_age <- function(animal, age) {
  if (animal == "dog") {
    print(age * 7)
  } else if (animal == "goat") {
    print(age * 4.7)
  }
}

animal_age("dog", 4)
```

# Functions interactive

Make a function that doubles a value

```{r}
double_value <- function(my_dollars) {
  print(2 * my_dollars)
}

double_value(my_dollars = 10.13)
```

```{r}
monthly_income <- c(42.50, 61.75, 89.50)

double_value(monthly_income)
```

Create a function that returns an awesome restaurant name given a cool animal and your favorite food

```{r}
name_restaurant <- function(animal, food) {
  print(paste0(animal, food))
}

name_restaurant(animal = "hawk", food = "pizza")
```

Given temperature in degrees Fahrenheit, write a function that converts it to Celsius

```{r}
convert_f_to_c <- function(f_temp) {
  print((f_temp-32)/1.8)
}

convert_f_to_c(52)
```

Create a function that given inputs of age and hometown, returns "I am \_ years old, and I'm from \_"

```{r}
origin_statement <- function(age, hometown) {
  print(paste("I am", age, "years old, and I'm from", hometown))
}

origin_statement(age = "25", hometown = "Norwalk")
```

```{r}
double_value2 <- function(dollars) {
  dollars * 2
}
double_value2(dollars = 10) * 0.08

class(double_value2(10))
```

Print statements and return statements

Print: "show me", Return: "store this so I can use it later"

# Functions with conditionals

```{r}
calculate_animal_age <- function(species, age_human_yrs) {
  if (species == "dog") {
    age_human_yrs * 7
  } else if (species == "goat") {
    age_human_yrs * 4.7
  }
  else {
    print(paste("Please enter dog or goat"))
  }
}

calculate_animal_age("dog", 10)
calculate_animal_age("goat", 4)
calculate_animal_age("whale", 10)
```

Write a function that, given temperature in Kelvin, if a user selects "metric" to the scale then return degrees Celsius, or if they select "English" then return degrees in Farenheit

```{r}
convert_kelvin <- function(temperature_type, temp_kelvin) {
  if (temperature_type == "metric") {
    print(temp_kelvin - 273.15)
  } else if (temperature_type == "English") {
    print(temp_kelvin - 459.67)
  }
}

convert_kelvin("metric", 30)
```

# Functions (continued)

Starting point

I want to automate estimating the population size over a range of times, and at multiple growth rates (for a constant initial population and carrying capacity).

What might a matrix of population size outputs look like for different times and growth rates?

```{r}
# brainstorming using pseudo-code

# out_matrix = matrix()

# for (i in sequence(growth_rates)) {
#  for (j in sequence(time)) {
# calc_logistric(for i over all j)
#   store calc_population in out_matrix
#  }
# }
```

```{r}
logistic_growth <- function(N0, K, r, time) {
  Nt <- K / (1 + ((K-N0) / N0) * exp(-r * time))
  print(Nt)
}
```

```{r}
time_vec <- seq(from = 0, to = 35, by = 0.1)

pop_35_vec <- vector(mode = "numeric", length = length(time_vec))

#the following is just for a single growth rate
for (i in 1:length(time_vec)) {
  population <- logistic_growth(N0 = 100, K = 6000, r = 0.27, time = time_vec[i])
  pop_35_vec[i] <- population
}
```

```{r}
# to see how different growth rates affects the data
# example, change growth rate by 20%

r_seq <- seq(from = 00.20, to = 0.40, by = 0.01)

out_matrix <- matrix(nrow = length(time_vec), ncol = length(r_seq))

for (i in 1:length(r_seq)) { # outer loop is the growth rates
  for (j in 1:length(time_vec)) { # inner loop is the time sequence values
    pop <- logistic_growth(N0=100, K=6000, r=r_seq[i], time=time_vec[j])
    out_matrix[j,i] <- pop # store the value in the appropriate row & column
  }
}

# matrix would like like a 3x4 matrix where rows = length(j), columns = length(i)

```

Drawn out matrix from example above

|              | apple = 1 | apple = 2 | apple = 3  | apple = 4 |
|--------------|-----------|-----------|------------|-----------|
| price = \$7  | 7         | 14        | 21         | 28        |
| price = \$10 | 10        | 20        | 30         | 40        |
| price = \$25 | 25        | 50        | 75         | 100       |

# Warning messages

How can we add our own?

Conditional statements +

-   stop(): Add custom error message

-   warning(): Add custom warning message

```{r}
# example
if (!animal %in% c("dog", "goat")) {
  stop("Oops! Animal must be a dog or a goat.")
}

if (windspeed > 130) {
  warning("Whoa, that's a high windspeed! Are you sure that's correct?")
}
```

# More functions (afternoon session)

Create a subset within a function, and then return something based on that subset.

```{r}
dog_choice <- data.frame(dog_name = c("Khora", "Teddy", "Waffle", "Banjo", "Tallie"), 
                         food = c("everything", "salmon", "pancakes", "chicken", "enchiladas"))
```

```{r}
dog_menu <- function(enter_dog_name) {
  my_subset <- filter(dog_choice, dog_name == enter_dog_name)
  print(paste("My name is", my_subset$dog_name, "and my favorite food is", my_subset$food))
}

dog_menu("Tallie")
```

## Function with a for loop

```{r}
df_means <- function(df) {
  for (i in seq_along(df)) {
    col_mean <- mean(df[[i]], na.rm = TRUE)
    column_name <- colnames(df[i])
    print(paste("The mean value of", column_name, "is", round(col_mean, 3)))
  }
}

df_means(mtcars)

df_means(faithful)
```
